"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useAsync", {
  enumerable: true,
  get: function get() {
    return _useAsync.default;
  }
});
Object.defineProperty(exports, "useLoadMore", {
  enumerable: true,
  get: function get() {
    return _useLoadMore.default;
  }
});
Object.defineProperty(exports, "usePaginated", {
  enumerable: true,
  get: function get() {
    return _usePaginated.default;
  }
});
exports.default = exports.UseAPIProvider = void 0;

var _react = require("react");

var _umiRequest = _interopRequireDefault(require("umi-request"));

var _useAsync = _interopRequireDefault(require("./useAsync"));

var _useLoadMore = _interopRequireDefault(require("./useLoadMore"));

var _usePaginated = _interopRequireDefault(require("./usePaginated"));

var _configContext = _interopRequireDefault(require("./configContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useRequest(service) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var contextConfig = (0, _react.useContext)(_configContext.default);

  var finalOptions = _objectSpread({}, contextConfig, {}, options);

  var paginated = finalOptions.paginated,
      loadMore = finalOptions.loadMore,
      requestMethod = finalOptions.requestMethod;
  var paginatedRef = (0, _react.useRef)(paginated);
  var loadMoreRef = (0, _react.useRef)(loadMore);

  if (paginatedRef.current !== paginated) {
    throw Error('You should not modify the paginated of options');
  }

  if (loadMoreRef.current !== loadMore) {
    throw Error('You should not modify the loadMore of options');
  }

  paginatedRef.current = paginated;
  loadMoreRef.current = loadMore;
  var finalRequestMethod = requestMethod || _umiRequest.default;
  var promiseService;

  if (typeof service === 'string') {
    promiseService = function promiseService() {
      return finalRequestMethod(service);
    };
  } else if (_typeof(service) === 'object') {
    var url = service.url,
        rest = _objectWithoutProperties(service, ["url"]);

    promiseService = function promiseService() {
      return requestMethod ? requestMethod(service) : (0, _umiRequest.default)(url, rest);
    };
  } else {
    promiseService = function promiseService() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        var result = service.apply(void 0, args);

        if (result.then) {
          result.then(function (data) {
            return resolve(data);
          }).catch(function (e) {
            return reject(e);
          });
        } else if (typeof result === 'string') {
          finalRequestMethod(result).then(function (data) {
            resolve(data);
          }).catch(function (e) {
            return reject(e);
          });
        } else if (_typeof(result) === 'object') {
          // umi-request 需要拆分下字段
          if (requestMethod) {
            finalRequestMethod(result).then(function (data) {
              resolve(data);
            }).catch(function (e) {
              return reject(e);
            });
          } else {
            var _url = result.url,
                _rest = _objectWithoutProperties(result, ["url"]);

            (0, _umiRequest.default)(_url, _rest).then(function (data) {
              resolve(data);
            }).catch(function (e) {
              return reject(e);
            });
          }
        }
      });
    };
  }

  if (loadMore) {
    return (0, _useLoadMore.default)(promiseService, finalOptions);
  }

  if (paginated) {
    return (0, _usePaginated.default)(promiseService, finalOptions);
  }

  return (0, _useAsync.default)(promiseService, finalOptions);
}

var UseAPIProvider = _configContext.default.Provider;
exports.UseAPIProvider = UseAPIProvider;
var _default = useRequest;
exports.default = _default;