function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import request from 'umi-request';
import useAsync from './useAsync';

function useRequest(service, options) {
  var promiseService;

  if (typeof service === 'string') {
    promiseService = function promiseService() {
      return request(service);
    };
  } else if (_typeof(service) === 'object') {
    var url = service.url,
        rest = _objectWithoutProperties(service, ["url"]);

    promiseService = function promiseService() {
      return request(url, rest);
    };
  } else {
    promiseService = function promiseService() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve) {
        var result = service.apply(void 0, args);

        if (typeof result === 'string') {
          request(result).then(function (data) {
            resolve(data);
          });
        } else if (_typeof(result) === 'object') {
          var _url = result.url,
              _rest = _objectWithoutProperties(result, ["url"]);

          request(_url, _rest).then(function (data) {
            resolve(data);
          });
        }
      });
    };
  }

  return useAsync(promiseService, options);
}

export default useRequest;