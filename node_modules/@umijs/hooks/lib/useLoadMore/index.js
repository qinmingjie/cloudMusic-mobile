"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _useUpdateEffect = _interopRequireDefault(require("../useUpdateEffect"));

var _useAsync2 = _interopRequireDefault(require("../useAsync"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function useLoadMore(fn, deps, options) {
  var _deps = Array.isArray(deps) ? deps : [];

  var _options = _typeof(deps) === 'object' && !Array.isArray(deps) ? deps : options || {};
  /* 初始化值 */


  var itemKey = _options.itemKey,
      _options$initPageSize = _options.initPageSize,
      initPageSize = _options$initPageSize === void 0 ? 10 : _options$initPageSize,
      formatResult = _options.formatResult,
      ref = _options.ref,
      _options$threshold = _options.threshold,
      threshold = _options$threshold === void 0 ? 100 : _options$threshold;
  var incrementSize = _options.incrementSize;

  if (!incrementSize) {
    incrementSize = initPageSize;
  }

  var _useState = (0, _react.useState)(1),
      _useState2 = _slicedToArray(_useState, 2),
      page = _useState2[0],
      setPage = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      total = _useState4[0],
      setTotal = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      data = _useState6[0],
      setData = _useState6[1];
  /* 控制重新执行 */


  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      count = _useState8[0],
      setCount = _useState8[1];
  /* 开始的时间戳 */


  var startTime = (0, _react.useRef)(new Date().getTime());

  var _useAsync = (0, _useAsync2.default)(fn, [], {
    manual: true
  }),
      run = _useAsync.run,
      loading = _useAsync.loading;
  /* id 模式下读取 Key */


  var getItemKey = (0, _react.useCallback)(function (item, index) {
    var key = typeof itemKey === 'function' ? itemKey(item, index) : item[itemKey];
    return key === undefined ? index : key;
  }, [itemKey]);
  var loadData = (0, _react.useCallback)(function () {
    var params = {
      page: page,
      pageSize: page === 1 ? initPageSize : incrementSize,
      offset: data.length,
      startTime: startTime.current
    };
    /* id 模式需要增加最后一个 id */

    if (itemKey) {
      params.id = data.length > 0 ? getItemKey(data[data.length - 1], data.length - 1) : undefined;
    }

    run(params).then(function (result) {
      if (!result) {
        return;
      }

      var _ref = formatResult ? formatResult(result) : result,
          currentTotal = _ref.total,
          currentData = _ref.data;

      setData(data.concat(currentData));
      setTotal(currentTotal);
    });
  }, [page, initPageSize, incrementSize, data]);
  var loadMore = (0, _react.useCallback)(function () {
    if (total && data.length >= total) {
      return;
    }

    setPage(page + 1);
    setCount(count + 1);
  }, [page, count, data, total]);
  var reload = (0, _react.useCallback)(function () {
    setPage(1);
    setData([]);
    startTime.current = new Date().getTime();
    setCount(count + 1);
  }, [count]);
  /* 上拉加载的方法 */

  var scrollMethod = (0, _react.useCallback)(function () {
    if (loading || !ref || !ref.current) {
      return;
    }

    if (ref.current.scrollHeight - ref.current.scrollTop <= ref.current.clientHeight + threshold) {
      loadMore();
    }
  }, [loading, ref, loadMore]);
  /* 如果有 ref，则会上拉加载更多 */

  (0, _react.useEffect)(function () {
    if (!ref || !ref.current) {
      return function () {};
    }

    ref.current.addEventListener('scroll', scrollMethod);
    return function () {
      if (ref && ref.current) {
        ref.current.removeEventListener('scroll', scrollMethod);
      }
    };
  }, [scrollMethod]);
  /* 只有初始化，或者 count 变化时，才会执行 run */

  (0, _react.useEffect)(function () {
    loadData();
  }, [count]);
  /* deps 变化后，重新 reload */

  (0, _useUpdateEffect.default)(function () {
    reload();
  }, _deps);
  return {
    data: data,
    loading: loading && page === 1,
    loadingMore: loading && page > 1,
    reload: reload,
    loadMore: loadMore,
    total: total,
    noMore: !loading && !total || !!total && data.length >= total
  };
}

var _default = useLoadMore;
exports.default = _default;