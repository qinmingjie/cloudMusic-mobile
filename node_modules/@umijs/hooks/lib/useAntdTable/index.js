"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _useAsync2 = _interopRequireDefault(require("../useAsync"));

var _useUpdateEffect = _interopRequireDefault(require("../useUpdateEffect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UseTableInitState = function UseTableInitState() {
  _classCallCheck(this, UseTableInitState);

  this.searchType = 'simple';
  this.current = 1;
  this.pageSize = 10;
  this.total = 0;
  this.formData = {};
  this.activeFormData = {};
  this.count = 0;
  this.data = [];
  this.filters = {};
  this.sorter = {};
}; // 缓存


var cacheData = {};

var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'updateState':
      return _objectSpread({}, state, {}, action.payload);

    default:
      throw new Error();
  }
};

function useAntdTable(fn, deps, options) {
  var _deps = Array.isArray(deps) ? deps : [];

  var _options = _typeof(deps) === 'object' && !Array.isArray(deps) ? deps : options || {};

  var initState = (0, _react.useMemo)(function () {
    return new UseTableInitState();
  }, []);
  var _options$defaultPageS = _options.defaultPageSize,
      defaultPageSize = _options$defaultPageS === void 0 ? 10 : _options$defaultPageS,
      id = _options.id,
      form = _options.form,
      formatResult = _options.formatResult;

  var _useReducer = (0, _react.useReducer)(reducer, _objectSpread({}, initState, {
    pageSize: defaultPageSize
  })),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];
  /* 临时记录切换前的表单数据 */


  var tempFieldsValueRef = (0, _react.useRef)({});
  var stateRef = (0, _react.useRef)({});
  stateRef.current = state;

  var _useAsync = (0, _useAsync2.default)(fn, _deps, {
    manual: true
  }),
      run = _useAsync.run,
      loading = _useAsync.loading;

  var reload = (0, _react.useCallback)(function () {
    dispatch({
      type: 'updateState',
      payload: {
        current: 1,
        count: state.count + 1
      }
    });
  }, [state.count]);
  var refresh = (0, _react.useCallback)(function () {
    dispatch({
      type: 'updateState',
      payload: {
        count: state.count + 1
      }
    });
  }, [state.count]);
  /* 初始化执行 */

  (0, _react.useEffect)(function () {
    /* 有缓存，恢复 */
    if (id && cacheData[id]) {
      var cache = cacheData[id];
      /* 修改完 formData 和 searchType 之后，会触发 useUpdateEffect，给当前表单赋值 */

      dispatch({
        type: 'updateState',
        payload: {
          current: cache.current,
          pageSize: cache.pageSize,
          searchType: cache.searchType,
          activeFormData: cache.activeFormData,
          formData: cache.formData,
          filters: cache.filters,
          sorter: cache.sorter,
          count: state.count + 1
        }
      });
    } else if (form) {
      /* 如果有 form，需要走 searchSubmit，为了初始化的时候，拿到 initialValue */
      searchSubmit();
    } else {
      refresh();
    }

    if (id) {
      return function () {
        cacheData[id] = stateRef.current;
      };
    }

    return function () {};
  }, []);
  /* deps 变化后，重置表格 */

  (0, _useUpdateEffect.default)(function () {
    reload();
  }, _deps);
  /* state.count 变化时，重新请求数据 */

  (0, _useUpdateEffect.default)(function () {
    var formattedData = {};
    /* 把  undefined 的过滤掉 */

    Object.keys(state.activeFormData).forEach(function (key) {
      if (state.activeFormData[key] !== undefined) {
        formattedData[key] = state.activeFormData[key];
      }
    });

    var params = _objectSpread({
      current: state.current,
      pageSize: state.pageSize
    }, formattedData);

    if (state.filters) {
      params.filters = state.filters;
    }

    if (state.sorter) {
      params.sorter = state.sorter;
    }

    run(params).then(function (res) {
      var payload = formatResult ? formatResult(res) : res;
      dispatch({
        type: 'updateState',
        payload: payload
      });
    });
  }, [state.current, state.pageSize, state.count]);
  /* 改变了 searchType，或者 formData，恢复表单数据 */

  (0, _useUpdateEffect.default)(function () {
    if (!form) {
      return;
    }

    var targetFormData = _objectSpread({}, state.formData, {}, tempFieldsValueRef.current);

    var existFormData = {};
    Object.keys(targetFormData).forEach(function (key) {
      if (form.getFieldInstance ? form.getFieldInstance(key) : true) {
        existFormData[key] = targetFormData[key];
      }
    });

    if (form.setFieldsValue) {
      form.setFieldsValue(existFormData);
    }

    tempFieldsValueRef.current = {};
  }, [state.searchType, state.formData]);
  /* 获得当前 form 数据 */

  var getCurrentFieldsValues = (0, _react.useCallback)(function () {
    if (!form) {
      return [];
    }

    var fieldsValue = {};

    if (form.getFieldsValue) {
      fieldsValue = form.getFieldsValue();
    }

    var filterFiledsValue = {};
    Object.keys(fieldsValue).forEach(function (key) {
      if (form.getFieldInstance ? form.getFieldInstance(key) : true) {
        filterFiledsValue[key] = fieldsValue[key];
      }
    });
    return filterFiledsValue;
  }, [form]); // 表单搜索

  var searchSubmit = (0, _react.useCallback)(function (e) {
    if (!form) {
      return;
    }

    if (e && e.preventDefault) {
      e.preventDefault();
    }

    setTimeout(function () {
      var activeFormData = getCurrentFieldsValues();
      dispatch({
        type: 'updateState',
        payload: {
          activeFormData: activeFormData,
          formData: _objectSpread({}, state.formData, {}, activeFormData)
        }
      });
      reload();
    });
  }, [form, reload]); // 重置表单

  var searchReset = (0, _react.useCallback)(function () {
    if (!form) {
      return;
    } // 恢复初始值


    if (form.resetFields) {
      form.resetFields();
    } // 重置表单后，拿到当前默认值


    var activeFormData = getCurrentFieldsValues();
    dispatch({
      type: 'updateState',
      payload: {
        activeFormData: activeFormData,
        formData: activeFormData
      }
    });
    reload();
  }, [form, reload]); // 切换搜索类型

  var changeSearchType = (0, _react.useCallback)(function () {
    if (!form) {
      return;
    }

    tempFieldsValueRef.current = getCurrentFieldsValues();
    var targetSearchType = state.searchType === 'simple' ? 'advance' : 'simple';
    dispatch({
      type: 'updateState',
      payload: {
        searchType: targetSearchType
      }
    });
  }, [state.searchType]); // 表格翻页 排序 筛选等

  var changeTable = (0, _react.useCallback)(function (p) {
    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // antd table 的初始状态 filter 带有 null 字段，需要先去除后再比较
    var realFilter = _objectSpread({}, f);

    Object.entries(realFilter).forEach(function (item) {
      if (item[1] === null) {
        delete realFilter[item[0]];
      }
    });
    var needReload = !(0, _lodash.default)(realFilter, state.filters) || s.field !== state.sorter.field || s.order !== state.sorter.order;
    dispatch({
      type: 'updateState',
      payload: {
        current: needReload ? 1 : p.current,
        pageSize: p.pageSize,
        count: state.count + 1,
        filters: f,
        sorter: s
      }
    });
  }, [state.count]);
  var result = {
    /* table 已经废弃 */
    table: {
      dataSource: state.data,
      loading: loading,
      onChange: changeTable,
      pagination: {
        current: state.current,
        pageSize: state.pageSize,
        total: state.total
      }
    },
    tableProps: {
      dataSource: state.data,
      loading: loading,
      onChange: changeTable,
      pagination: {
        current: state.current,
        pageSize: state.pageSize,
        total: state.total
      }
    },
    sorter: state.sorter,
    filters: state.filters,
    refresh: refresh
  };

  if (form) {
    result.search = {
      submit: searchSubmit,
      type: state.searchType,
      changeType: changeSearchType,
      reset: searchReset
    };
  }

  return result;
}

var _default = useAntdTable;
exports.default = _default;