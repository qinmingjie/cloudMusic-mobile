"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

// 键盘事件 keyCode 别名
var aliasKeyCodeMap = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  delete: [8, 46]
}; // 键盘事件 key 别名

var aliasKeyMap = {
  esc: 'Escape',
  tab: 'Tab',
  enter: 'Enter',
  space: ' ',
  // IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  delete: ['Backspace', 'Delete']
}; // 修饰键

var modifierKey = {
  ctrl: function ctrl(event) {
    return event.ctrlKey;
  },
  shift: function shift(event) {
    return event.shiftKey;
  },
  alt: function alt(event) {
    return event.altKey;
  },
  meta: function meta(event) {
    return event.metaKey;
  }
}; // 返回空对象

var noop = function noop() {};
/**
 * 判断对象类型
 * @param [obj: any] 参数对象
 * @returns String
 */


function isType(obj) {
  return Object.prototype.toString.call(obj).replace(/^\[object (.+)\]$/, '$1').toLowerCase();
}
/**
 * 判断按键是否激活
 * @param [event: KeyboardEvent]键盘事件
 * @param [keyFilter: any] 当前键
 * @returns Boolean
 */


function genFilterKey(event, keyFilter) {
  var type = isType(keyFilter); // 数字类型直接匹配事件的 keyCode

  if (type === 'number') {
    return event.keyCode === keyFilter;
  } // 字符串依次判断是否有组合键


  var genArr = keyFilter.split('.');
  var genLen = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = genArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;
      // 组合键
      var genModifier = modifierKey[key]; // key 别名

      var aliasKey = aliasKeyMap[key]; // keyCode 别名

      var aliasKeyCode = aliasKeyCodeMap[key];
      /**
       * 满足以上规则
       * 1. 自定义组合键别名
       * 2. 自定义 key 别名
       * 3. 自定义 keyCode 别名
       * 4. 匹配 key 或 keyCode
       */

      if (genModifier && genModifier(event) || (aliasKey && isType(aliasKey) === 'array' ? aliasKey.includes(event.key) : aliasKey === event.key) || (aliasKeyCode && isType(aliasKeyCode) === 'array' ? aliasKeyCode.includes(event.keyCode) : aliasKeyCode === event.keyCode) || event.key.toUpperCase() === key.toUpperCase()) {
        genLen++;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return genLen === genArr.length;
}
/**
 * 键盘输入预处理方法
 * @param [keyFilter: any] 当前键
 * @returns () => Boolean
 */


function genKeyFormater(keyFilter) {
  var type = isType(keyFilter);

  if (type === 'function') {
    return keyFilter;
  }

  if (type === 'string' || type === 'number') {
    return function (event) {
      return genFilterKey(event, keyFilter);
    };
  }

  if (type === 'array') {
    return function (event) {
      return keyFilter.some(function (item) {
        return genFilterKey(event, item);
      });
    };
  }

  return keyFilter ? function () {
    return true;
  } : function () {
    return false;
  };
}

var defaultEvents = ['keydown'];

function useKeyPress(keyFilter) {
  var eventHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _option$events = option.events,
      events = _option$events === void 0 ? defaultEvents : _option$events,
      target = option.target;
  var element = (0, _react.useRef)();
  var callbackRef = (0, _react.useRef)(eventHandler);
  callbackRef.current = eventHandler;
  var callbackHandler = (0, _react.useCallback)(function (event) {
    var genGuard = genKeyFormater(keyFilter);

    if (genGuard(event)) {
      return callbackRef.current(event);
    }
  }, [keyFilter]);
  (0, _react.useEffect)(function () {
    var targetElement = typeof target === 'function' ? target() : target;
    var el = element.current || targetElement || window;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = events[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var eventName = _step2.value;
        el.addEventListener(eventName, callbackHandler);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return function () {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = events[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var eventName = _step3.value;
          el.removeEventListener(eventName, callbackHandler);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    };
  }, [events, callbackHandler, target]);
  return element;
}

var _default = useKeyPress;
exports.default = _default;