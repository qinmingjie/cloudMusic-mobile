import { CombineService, PaginatedParams, BasePaginatedOptions, PaginatedOptionsWithFormat, PaginatedFormatReturn, PaginatedResult } from '@umijs/use-request/lib/types';
export { CombineService, PaginatedParams, BasePaginatedOptions, PaginatedOptionsWithFormat, PaginatedFormatReturn, PaginatedResult };
export interface Store {
    [name: string]: any;
}
export interface UseAntdTableFormUtils {
    getFieldInstance?: (name: string) => {};
    setFieldsValue: (value: Store) => void;
    getFieldsValue: (...args: any) => Store;
    resetFields: (...args: any) => void;
    [key: string]: any;
}
export interface Result<Item> extends PaginatedResult<Item> {
    search: {
        type: 'simple' | 'advance';
        changeType: () => void;
        submit: () => void;
        reset: () => void;
    };
}
export interface BaseOptions<U> extends Omit<BasePaginatedOptions<U>, 'paginated'> {
    form?: UseAntdTableFormUtils;
}
export interface OptionsWithFormat<R, Item, U> extends Omit<PaginatedOptionsWithFormat<R, Item, U>, 'paginated'> {
    form?: UseAntdTableFormUtils;
}
declare function useFormTable<R = any, Item = any, U extends Item = any>(service: CombineService<R, PaginatedParams>, options: OptionsWithFormat<R, Item, U>): Result<Item>;
declare function useFormTable<R = any, Item = any, U extends Item = any>(service: CombineService<PaginatedFormatReturn<Item>, PaginatedParams>, options: BaseOptions<U>): Result<Item>;
export default useFormTable;
