"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _useBoolean2 = _interopRequireDefault(require("../useBoolean"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default(options) {
  var _ref = options || {},
      dom = _ref.dom,
      onEnter = _ref.onEnter,
      onLeave = _ref.onLeave;

  var element = (0, _react.useRef)(null);
  var onEnterRef = (0, _react.useRef)(onEnter);
  onEnterRef.current = onEnter;
  var onLeaveRef = (0, _react.useRef)(onLeave);
  onLeaveRef.current = onLeave;

  var _useBoolean = (0, _useBoolean2.default)(false),
      state = _useBoolean.state,
      setTrue = _useBoolean.setTrue,
      setFalse = _useBoolean.setFalse;

  (0, _react.useEffect)(function () {
    var onMouseEnter = function onMouseEnter() {
      if (onEnterRef.current) onEnterRef.current();
      setTrue();
    };

    var onMouseLeave = function onMouseLeave() {
      if (onLeaveRef.current) onLeaveRef.current();
      setFalse();
    };

    var passedInElement = typeof dom === 'function' ? dom() : dom; // 如果 传入dom

    if (passedInElement) {
      passedInElement.addEventListener('mouseenter', onMouseEnter);
      passedInElement.addEventListener('mouseleave', onMouseLeave);
      return function () {
        passedInElement.removeEventListener('mouseenter', onMouseEnter);
        passedInElement.removeEventListener('mouseleave', onMouseLeave);
      };
    }

    var node = element.current;

    if (node) {
      node.addEventListener('mouseenter', onMouseEnter);
      node.addEventListener('mouseleave', onMouseLeave);
      return function () {
        node.removeEventListener('mouseenter', onMouseEnter);
        node.removeEventListener('mouseleave', onMouseLeave);
      };
    }
  }, [element.current, typeof dom === 'function' ? undefined : dom]);

  if (dom) {
    return [!!state];
  }

  return [!!state, element];
};

exports.default = _default;