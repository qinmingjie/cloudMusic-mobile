"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useToggle() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var reverseValue = arguments.length > 1 ? arguments[1] : undefined;

  var _useState = (0, _react.useState)(defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var reverseValueOrigin = (0, _react.useMemo)(function () {
    return reverseValue === undefined ? !defaultValue : reverseValue;
  }, [reverseValue]); // 切换返回值

  var toggle = (0, _react.useCallback)(function (value) {
    // 强制返回状态值，适用于点击操作
    if (value !== undefined) {
      setState(value);
      return;
    }

    var data = state === defaultValue ? reverseValueOrigin : defaultValue;
    setState(data);
  }, [state]); // 设置默认值

  var setLeft = (0, _react.useCallback)(function () {
    setState(defaultValue);
  }, [setState]); // 设置取反值

  var setRight = (0, _react.useCallback)(function () {
    setState(reverseValueOrigin);
  }, [setState]);
  return {
    state: state,
    toggle: toggle,
    setLeft: setLeft,
    setRight: setRight
  };
}

var _default = useToggle;
exports.default = _default;