"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _useUpdateEffect = _interopRequireDefault(require("../useUpdateEffect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function useThrottleFn(fn, deps, wait) {
  var _deps = Array.isArray(deps) ? deps : [];

  var _wait = typeof deps === 'number' ? deps : wait || 0;

  var timer = (0, _react.useRef)();
  var fnRef = (0, _react.useRef)(fn);
  fnRef.current = fn;
  var currentArgs = (0, _react.useRef)([]);
  var cancel = (0, _react.useCallback)(function () {
    if (timer.current) {
      clearTimeout(timer.current);
    }

    timer.current = undefined;
  }, []);
  var run = (0, _react.useCallback)(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    currentArgs.current = args;

    if (!timer.current) {
      timer.current = setTimeout(function () {
        fnRef.current.apply(fnRef, _toConsumableArray(currentArgs.current));
        timer.current = undefined;
      }, _wait);
    }
  }, [_wait, cancel]);
  (0, _useUpdateEffect.default)(function () {
    run();
  }, [].concat(_toConsumableArray(_deps), [run]));
  (0, _react.useEffect)(function () {
    return cancel;
  }, []);
  return {
    run: run,
    cancel: cancel
  };
}

var _default = useThrottleFn;
exports.default = _default;