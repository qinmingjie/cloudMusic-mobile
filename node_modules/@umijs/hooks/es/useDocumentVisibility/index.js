function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useState, useEffect } from 'react';

var getVisibility = function getVisibility() {
  // 如果是服务端渲染，直接返回true
  if (typeof document === 'undefined') return true;
  return document.visibilityState;
};

function useDocumentVisibility() {
  var _useState = useState(getVisibility()),
      _useState2 = _slicedToArray(_useState, 2),
      documentVisibility = _useState2[0],
      setDocumentVisibility = _useState2[1];

  useEffect(function () {
    var handleVisibilityChange = function handleVisibilityChange() {
      setDocumentVisibility(getVisibility());
    };

    window.addEventListener('visibilitychange', handleVisibilityChange);
    return function () {
      window.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);
  return documentVisibility;
}

export default useDocumentVisibility;