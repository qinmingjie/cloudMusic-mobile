function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import useRequest from '@umijs/use-request';
import { useState, useCallback, useEffect, useRef } from 'react';
import { CombineService, PaginatedParams, BasePaginatedOptions, PaginatedOptionsWithFormat, PaginatedFormatReturn, PaginatedResult } from '@umijs/use-request/lib/types';
import useUpdateEffect from '../useUpdateEffect';
import usePersistFn from '../usePersistFn';
export { CombineService, PaginatedParams, BasePaginatedOptions, PaginatedOptionsWithFormat, PaginatedFormatReturn, PaginatedResult };

function useFormTable(service, options) {
  var form = options.form,
      _options$refreshDeps = options.refreshDeps,
      refreshDeps = _options$refreshDeps === void 0 ? [] : _options$refreshDeps,
      manual = options.manual,
      restOptions = _objectWithoutProperties(options, ["form", "refreshDeps", "manual"]);

  var result = useRequest(service, _objectSpread({}, restOptions, {
    paginated: true,
    manual: true
  }));
  var params = result.params,
      run = result.run;
  var cacheFormTableData = params[2] || {}; // 优先从缓存中读

  var _useState = useState(cacheFormTableData.type || 'simple'),
      _useState2 = _slicedToArray(_useState, 2),
      type = _useState2[0],
      setType = _useState2[1]; // 全量 form 数据，包括 simple 和 advance


  var _useState3 = useState(cacheFormTableData.allFormData || {}),
      _useState4 = _slicedToArray(_useState3, 2),
      allFormData = _useState4[0],
      setAllFormData = _useState4[1]; // 获取当前展示的 form 字段值


  var getActivetFieldValues = useCallback(function () {
    if (!form) {
      return {};
    } // antd 3


    if (form.getFieldInstance) {
      var tempAllFiledsValue = form.getFieldsValue();
      var filterFiledsValue = {};
      Object.keys(tempAllFiledsValue).forEach(function (key) {
        if (form.getFieldInstance ? form.getFieldInstance(key) : true) {
          filterFiledsValue[key] = tempAllFiledsValue[key];
        }
      });
      return filterFiledsValue;
    } // antd 4


    return form.getFieldsValue(null, function () {
      return true;
    });
  }, [form]);
  var formRef = useRef(form);
  formRef.current = form;
  /* 初始化，或改变了 searchType, 恢复表单数据 */

  useEffect(function () {
    if (!formRef.current) {
      return;
    } // antd 3


    if (formRef.current.getFieldInstance) {
      // antd 3 需要判断字段是否存在，否则会抛警告
      var filterFiledsValue = {};
      Object.keys(allFormData).forEach(function (key) {
        if (formRef.current.getFieldInstance ? formRef.current.getFieldInstance(key) : true) {
          filterFiledsValue[key] = allFormData[key];
        }
      });
      formRef.current.setFieldsValue(filterFiledsValue);
    } else {
      // antd 4
      formRef.current.setFieldsValue(allFormData);
    }
  }, [type]); // 首次加载，手动提交。为了拿到 form 的 initial values

  useEffect(function () {
    // 如果有缓存，则使用缓存，重新请求
    if (params.length > 0) {
      run.apply(void 0, _toConsumableArray(params));
      return;
    } // 如果没有缓存，触发 submit


    if (!manual) {
      submit();
    }
  }, []);
  var changeType = useCallback(function () {
    var currentFormData = getActivetFieldValues();
    setAllFormData(_objectSpread({}, allFormData, {}, currentFormData));
    var targetType = type === 'simple' ? 'advance' : 'simple';
    setType(targetType);
  }, [type, allFormData, getActivetFieldValues]);
  var submit = useCallback(function (e) {
    if (e === null || e === void 0 ? void 0 : e.preventDefault) {
      e.preventDefault();
    }

    setTimeout(function () {
      var activeFormData = getActivetFieldValues(); // 记录全量数据

      var _allFormData = _objectSpread({}, allFormData, {}, activeFormData);

      setAllFormData(_allFormData);
      run(_objectSpread({
        pageSize: options.defaultPageSize || 10
      }, params[0] || {}, {
        // 防止 manual 情况下，第一次触发 submit，此时没有 params[0]
        current: 1
      }), activeFormData, {
        allFormData: _allFormData,
        type: type
      });
    });
  }, [getActivetFieldValues, run, params, allFormData, type]);
  var reset = useCallback(function () {
    if (form) {
      form.resetFields();
    }

    submit();
  }, [form, submit]);
  var resetPersistFn = usePersistFn(reset); // refreshDeps 变化，reset。

  useUpdateEffect(function () {
    if (!manual) {
      resetPersistFn();
    }
  }, _toConsumableArray(refreshDeps));
  return _objectSpread({}, result, {
    search: {
      submit: submit,
      type: type,
      changeType: changeType,
      reset: reset
    }
  });
}

export default useFormTable;