function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useEffect, useRef, useState } from 'react';

function useScroll() {
  var _useState = useState({
    left: NaN,
    top: NaN
  }),
      _useState2 = _slicedToArray(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];

  var ref = useRef();
  var hasPassedInElement = arguments.length === 1;
  var arg = arguments.length <= 0 ? undefined : arguments[0];
  useEffect(function () {
    var passedInElement = typeof arg === 'function' ? arg() : arg;
    var element = hasPassedInElement ? passedInElement : ref.current;
    if (!element) return;

    function updatePosition(target) {
      var newPosition;

      if (target === document) {
        if (!document.scrollingElement) return;
        newPosition = {
          left: document.scrollingElement.scrollLeft,
          top: document.scrollingElement.scrollTop
        };
      } else {
        newPosition = {
          left: target.scrollLeft,
          top: target.scrollTop
        };
      }

      setPosition(newPosition);
    }

    updatePosition(element);

    function listener(event) {
      if (!event.target) return;
      updatePosition(event.target);
    }

    element.addEventListener('scroll', listener);
    return function () {
      element.removeEventListener('scroll', listener);
    };
  }, [ref.current, typeof arg === 'function' ? undefined : arg]);
  return [position, ref];
}

export default useScroll;