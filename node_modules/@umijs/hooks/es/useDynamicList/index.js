function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useState, useRef, useCallback } from 'react';
export default (function (initialValue) {
  var counterRef = useRef(-1); // key 存储器

  var keyList = useRef([]); // 内部方法

  var setKey = useCallback(function (index) {
    counterRef.current += 1;
    keyList.current.splice(index, 0, counterRef.current);
  }, []);

  var _useState = useState(function () {
    (initialValue || []).forEach(function (_, index) {
      setKey(index);
    });
    return initialValue || [];
  }),
      _useState2 = _slicedToArray(_useState, 2),
      list = _useState2[0],
      setList = _useState2[1];

  var resetList = function resetList() {
    var newList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    keyList.current = [];
    counterRef.current = -1;
    setList(function () {
      (newList || []).forEach(function (_, index) {
        setKey(index);
      });
      return newList || [];
    });
  };

  var insert = function insert(index, obj) {
    setList(function (l) {
      var temp = _toConsumableArray(l);

      temp.splice(index, 0, obj);
      setKey(index);
      return temp;
    });
  };

  var getKey = function getKey(index) {
    return keyList.current[index];
  };

  var getIndex = function getIndex(index) {
    return keyList.current.findIndex(function (ele) {
      return ele === index;
    });
  };

  var merge = function merge(index, obj) {
    setList(function (l) {
      var temp = _toConsumableArray(l);

      obj.forEach(function (_, i) {
        setKey(index + i);
      });
      temp.splice.apply(temp, [index, 0].concat(_toConsumableArray(obj)));
      return temp;
    });
  };

  var replace = function replace(index, obj) {
    setList(function (l) {
      var temp = _toConsumableArray(l);

      temp[index] = obj;
      return temp;
    });
  };

  var remove = function remove(index) {
    setList(function (l) {
      var temp = _toConsumableArray(l);

      temp.splice(index, 1); // remove keys if necessary

      try {
        keyList.current.splice(index, 1);
      } catch (e) {
        console.error(e);
      }

      return temp;
    });
  };

  var move = function move(oldIndex, newIndex) {
    if (oldIndex === newIndex) {
      return;
    }

    setList(function (l) {
      var newList = _toConsumableArray(l);

      var temp = newList.filter(function (_, index) {
        return index !== oldIndex;
      });
      temp.splice(newIndex, 0, newList[oldIndex]); // move keys if necessary

      try {
        var keyTemp = keyList.current.filter(function (_, index) {
          return index !== oldIndex;
        });
        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);
        keyList.current = keyTemp;
      } catch (e) {
        console.error(e);
      }

      return temp;
    });
  };

  var push = function push(obj) {
    setList(function (l) {
      setKey(l.length);
      return l.concat([obj]);
    });
  };

  var pop = function pop() {
    // remove keys if necessary
    try {
      keyList.current = keyList.current.slice(0, keyList.current.length - 1);
    } catch (e) {
      console.error(e);
    }

    setList(function (l) {
      return l.slice(0, l.length - 1);
    });
  };

  var unshift = function unshift(obj) {
    setList(function (l) {
      setKey(0);
      return [obj].concat(l);
    });
  };

  var sortForm = function sortForm(result) {
    return result.map(function (item, index) {
      return {
        key: index,
        item: item
      };
    }) // add index into obj
    .sort(function (a, b) {
      return getIndex(a.key) - getIndex(b.key);
    }) // sort based on the index of table
    .filter(function (item) {
      return !!item.item;
    }) // remove undefined(s)
    .map(function (item) {
      return item.item;
    });
  }; // retrive the data


  var shift = function shift() {
    // remove keys if necessary
    try {
      keyList.current = keyList.current.slice(1, keyList.current.length);
    } catch (e) {
      console.error(e);
    }

    setList(function (l) {
      return l.slice(1, l.length);
    });
  };

  return {
    list: list,
    insert: insert,
    merge: merge,
    replace: replace,
    remove: remove,
    getKey: getKey,
    getIndex: getIndex,
    move: move,
    push: push,
    pop: pop,
    unshift: unshift,
    shift: shift,
    sortForm: sortForm,
    resetList: resetList
  };
});