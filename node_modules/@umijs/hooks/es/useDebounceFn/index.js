function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { useCallback, useEffect, useRef } from 'react';
import useUpdateEffect from '../useUpdateEffect';

function useDebounceFn(fn, deps, wait) {
  var _deps = Array.isArray(deps) ? deps : [];

  var _wait = typeof deps === 'number' ? deps : wait || 0;

  var timer = useRef();
  var fnRef = useRef(fn);
  fnRef.current = fn;
  var cancel = useCallback(function () {
    if (timer.current) {
      clearTimeout(timer.current);
    }
  }, []);
  var run = useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    cancel();
    timer.current = setTimeout(function () {
      fnRef.current.apply(fnRef, args);
    }, _wait);
  }, [_wait, cancel]);
  useUpdateEffect(function () {
    run();
    return cancel;
  }, [].concat(_toConsumableArray(_deps), [run]));
  useEffect(function () {
    return cancel;
  }, []);
  return {
    run: run,
    cancel: cancel
  };
}

export default useDebounceFn;