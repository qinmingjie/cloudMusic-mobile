function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useState, useCallback } from 'react';

var dumpIndex = function dumpIndex(step, arr) {
  var index = step > 0 ? step - 1 // move forward
  : arr.length + step; // move backward

  if (index >= arr.length - 1) {
    index = arr.length - 1;
  }

  if (index < 0) {
    index = 0;
  }

  return index;
};

var split = function split(step, targetArr) {
  var index = dumpIndex(step, targetArr);
  return {
    _current: targetArr[index],
    _before: targetArr.slice(0, index),
    _after: targetArr.slice(index + 1)
  };
};

export default function useHistoryTravel(initialValue) {
  var _useState = useState({
    present: initialValue,
    past: [],
    future: []
  }),
      _useState2 = _slicedToArray(_useState, 2),
      history = _useState2[0],
      setHistory = _useState2[1];

  var present = history.present,
      past = history.past,
      future = history.future;
  var updateValue = useCallback(function (val) {
    setHistory({
      present: val,
      future: [],
      past: [].concat(_toConsumableArray(past), [present])
    });
  }, [history, setHistory]);

  var _forward = useCallback(function () {
    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (future.length === 0) {
      return;
    }

    var _split = split(step, future),
        _before = _split._before,
        _current = _split._current,
        _after = _split._after;

    setHistory({
      past: [].concat(_toConsumableArray(past), [present], _toConsumableArray(_before)),
      present: _current,
      future: _after
    });
  }, [history, setHistory]);

  var _backward = useCallback(function () {
    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

    if (past.length === 0) {
      return;
    }

    var _split2 = split(step, past),
        _before = _split2._before,
        _current = _split2._current,
        _after = _split2._after;

    setHistory({
      past: _before,
      present: _current,
      future: [].concat(_toConsumableArray(_after), [present], _toConsumableArray(future))
    });
  }, [history, setHistory]);

  var go = useCallback(function (step) {
    if (step === 0) {
      return;
    }

    if (step > 0) {
      return _forward(step);
    }

    _backward(step);
  }, [_backward, _forward]);
  return {
    value: present,
    setValue: updateValue,
    backLength: past.length,
    forwardLength: future.length,
    go: go,
    back: useCallback(function () {
      go(-1);
    }, [go]),
    forward: useCallback(function () {
      go(1);
    }, [go])
  };
}