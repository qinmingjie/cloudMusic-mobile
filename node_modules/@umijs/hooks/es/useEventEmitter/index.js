function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { useRef, useEffect } from 'react';
export var EventEmitter = function EventEmitter() {
  var _this = this;

  _classCallCheck(this, EventEmitter);

  this.subscriptions = new Set();

  this.emit = function (val) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _this.subscriptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var subscription = _step.value;
        subscription(val);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  this.useSubscription = function (callback) {
    var callbackRef = useRef();
    callbackRef.current = callback;
    useEffect(function () {
      function subscription(val) {
        if (callbackRef.current) {
          callbackRef.current(val);
        }
      }

      _this.subscriptions.add(subscription);

      return function () {
        _this.subscriptions.delete(subscription);
      };
    }, []);
  };
};
export default function useEventEmitter() {
  var ref = useRef();

  if (!ref.current) {
    ref.current = new EventEmitter();
  }

  return ref.current;
}