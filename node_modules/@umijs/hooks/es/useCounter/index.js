function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useMemo, useState } from 'react';
import useCreation from '../useCreation';

function useCounter() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var min = options.min,
      max = options.max; // get init value

  var init = useCreation(function () {
    if (typeof max === 'number') {
      return Math.min(max, initialValue);
    }

    if (typeof min === 'number') {
      return Math.max(min, initialValue);
    }

    return initialValue;
  }, []);

  var _useState = useState(init),
      _useState2 = _slicedToArray(_useState, 2),
      current = _useState2[0],
      setCurrent = _useState2[1];

  var actions = useMemo(function () {
    var setValue = function setValue(value) {
      setCurrent(function (c) {
        // get target value
        var target = typeof value === 'number' ? value : value(c);

        if (typeof max === 'number') {
          target = Math.min(max, target);
        }

        if (typeof min === 'number') {
          target = Math.max(min, target);
        }

        return target;
      });
    };

    var inc = function inc() {
      var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      setValue(function (c) {
        return c + delta;
      });
    };

    var dec = function dec() {
      var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      setValue(function (c) {
        return c - delta;
      });
    };

    var set = function set(value) {
      setValue(value);
    };

    var reset = function reset() {
      setValue(init);
    };

    return {
      inc: inc,
      dec: dec,
      set: set,
      reset: reset
    };
  }, []);
  return [current, actions];
}

export default useCounter;