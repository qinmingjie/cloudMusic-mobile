import { DependencyList } from 'react';
export interface Options<T> {
    manual?: boolean;
    pollingInterval?: number;
    onSuccess?: (data: T, params?: any[]) => void;
    onError?: (e: Error, params?: any[]) => void;
    autoCancel?: boolean;
}
declare type noop = (...args: any[]) => void;
declare const noop: noop;
declare type promiseReturn<T> = (...args: any[]) => Promise<T | undefined>;
declare const promiseReturn: promiseReturn<any>;
export interface ReturnValue<T> {
    loading: boolean;
    error?: Error | string;
    params: any[];
    data?: T;
    cancel: noop;
    run: promiseReturn<T | undefined>;
    timer: {
        stop: noop;
        resume: noop;
        pause: noop;
    };
}
declare function useAsync<Result = any>(fn: (...args: any[]) => Promise<Result>, options?: Options<Result>): ReturnValue<Result>;
declare function useAsync<Result = any>(fn: (...args: any[]) => Promise<Result>, deps?: DependencyList, options?: Options<Result>): ReturnValue<Result>;
export default useAsync;
