{"ast":null,"code":"import React from \"react\";\nimport Axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nconst http = Axios.create({\n  baseURL: \"http://39.107.87.215:8889\"\n}); //loading\n\nfunction useLoading() {\n  let dispatch = useDispatch();\n  return function (loading) {\n    dispatch({\n      type: \"setLoading\",\n      data: loading\n    });\n  };\n} // 获取banner数据\n\n\nfunction useBanner() {\n  let dispatch = useDispatch();\n  let loasingstore = useLoading();\n  return function (banner) {\n    http.get(`/banner`).then(res => {\n      //用来返回一个函数，在组件的生命周期useEffect执行\n      dispatch({\n        type: \"banner_data\",\n        data: res.data,\n        loading: false\n      });\n      loasingstore(false);\n    });\n  };\n} //获取热门推荐数据\n\n\nfunction useRecommend() {\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  let loasingstore = useLoading();\n  return function (recommend) {\n    http.get(recommend).then(res => {\n      dispatch({\n        type: \"recommend_data\",\n        data: res.data\n      });\n      loasingstore(false);\n    });\n  };\n} //获取移动端M歌单\n\n\nfunction useMRecommend() {\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  return function (recommend) {\n    http.get(recommend).then(res => {\n      dispatch({\n        type: \"Mrecommend_data\",\n        data: res.data\n      });\n    });\n  };\n} //获取移动端最新音乐推荐\n\n\nfunction useMnewmusic() {\n  let loasingstore = useLoading();\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  return function (recommend) {\n    http.get(recommend).then(res => {\n      dispatch({\n        type: \"MListNew_data\",\n        data: res.data\n      });\n    });\n  };\n} // 获取移动端热歌榜\n\n\nfunction useMhot() {\n  let loasingstore = useLoading();\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  return function (hot) {\n    http.get(hot).then(res => {\n      dispatch({\n        type: \"Mhot_data\",\n        data: res.data\n      });\n    });\n  };\n} //获取热门推荐数据\n\n\nfunction useNewDics() {\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  return function (newdics) {\n    http.get(newdics).then(res => {\n      dispatch({\n        type: \"newdics_data\",\n        data: res.data\n      });\n    });\n  };\n} //获取榜单数据\n\n\nfunction useOrgdata() {\n  let dispatch = useDispatch(); //用来返回一个函数，在组件的生命周期useEffect执行\n\n  return function (Org) {\n    http.get(Org).then(res => {\n      dispatch({\n        type: \"topListOrg_data\",\n        data: res.data\n      });\n    });\n  };\n}\n\nfunction useUpdata() {\n  let dispatch = useDispatch();\n  return function (up) {\n    http.get(up).then(res => {\n      dispatch({\n        type: \"topListUp_data\",\n        data: res.data\n      });\n    });\n  };\n}\n\nfunction useNewdata() {\n  let dispatch = useDispatch();\n  return function (New) {\n    http.get(New).then(res => {\n      dispatch({\n        type: \"topListNew_data\",\n        data: res.data\n      });\n    });\n  };\n} // 获取歌单分类\n\n\nfunction usePlaylists() {\n  let dispatch = useDispatch();\n  return function (playlists) {\n    http.get(playlists).then(res => {\n      dispatch({\n        type: \"playlists_data\",\n        data: res.data,\n        loading: false\n      });\n    });\n  };\n} //获取歌单详情\n\n\nfunction usePlaydetail() {\n  let dispatch = useDispatch();\n  return function (playdetail) {\n    http.get(playdetail).then(res => {\n      dispatch({\n        type: \"playdetail_data\",\n        data: res.data,\n        loading: false\n      });\n    });\n  };\n} //获取音乐地址\n\n\nfunction useMusicurl(path) {\n  let dispatch = useDispatch();\n  return function (mucid) {\n    http.get(mucid).then(res => {\n      dispatch({\n        type: \"musicurl_data\",\n        data: res.data\n      });\n    });\n  };\n}\n\nfunction getUrl(path) {\n  return http.get(path);\n}\n\nfunction useInterTime() {\n  let dispatch = useDispatch();\n  return function (time) {\n    dispatch({\n      type: \"time_data\",\n      data: time\n    });\n  };\n}\n\nexport { useLoading, useInterTime, useMhot, useBanner, useRecommend, useNewDics, useOrgdata, useUpdata, useNewdata, usePlaylists, usePlaydetail, useMusicurl, getUrl, useMRecommend, useMnewmusic };","map":{"version":3,"sources":["E:/github-project/cloudMusic-mobile/src/store/action/index.js"],"names":["React","Axios","useDispatch","http","create","baseURL","useLoading","dispatch","loading","type","data","useBanner","loasingstore","banner","get","then","res","useRecommend","recommend","useMRecommend","useMnewmusic","useMhot","hot","useNewDics","newdics","useOrgdata","Org","useUpdata","up","useNewdata","New","usePlaylists","playlists","usePlaydetail","playdetail","useMusicurl","path","mucid","getUrl","useInterTime","time"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport Axios from \"axios\"\r\nimport {useDispatch} from \"react-redux\"\r\nconst http = Axios.create({\r\n    baseURL:\"http://39.107.87.215:8889\"\r\n})\r\n\r\n//loading\r\nfunction useLoading(){\r\n    let dispatch = useDispatch() \r\n    return function(loading){\r\n        dispatch({\r\n            type:\"setLoading\",\r\n            data:loading\r\n        })\r\n    }\r\n}\r\n// 获取banner数据\r\nfunction useBanner(){\r\n   let dispatch = useDispatch();\r\n   let loasingstore = useLoading()\r\n   return function(banner){\r\n    http.get(`/banner`).then((res)=>{  //用来返回一个函数，在组件的生命周期useEffect执行\r\n        dispatch({\r\n            type:\"banner_data\",\r\n            data:res.data,\r\n            loading:false\r\n        })\r\n        loasingstore(false)\r\n    })\r\n   }\r\n}\r\n\r\n//获取热门推荐数据\r\nfunction useRecommend(){\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    let loasingstore = useLoading()\r\n    return function(recommend){\r\n        http.get(recommend).then((res)=>{\r\n            dispatch({\r\n                type:\"recommend_data\",\r\n                data:res.data\r\n            })\r\n            loasingstore(false)\r\n        }) \r\n    }\r\n}\r\n\r\n//获取移动端M歌单\r\nfunction useMRecommend(){\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    return function(recommend){\r\n        http.get(recommend).then((res)=>{\r\n            dispatch({\r\n                type:\"Mrecommend_data\",\r\n                data:res.data\r\n            })\r\n        }) \r\n    }\r\n}\r\n//获取移动端最新音乐推荐\r\nfunction useMnewmusic(){\r\n    let loasingstore = useLoading()\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    return function(recommend){\r\n        http.get(recommend).then((res)=>{\r\n            dispatch({\r\n                type:\"MListNew_data\",\r\n                data:res.data\r\n            })\r\n        }) \r\n    }\r\n}\r\n// 获取移动端热歌榜\r\nfunction useMhot(){\r\n    let loasingstore = useLoading()\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    return function(hot){\r\n        http.get(hot).then((res)=>{\r\n            dispatch({\r\n                type:\"Mhot_data\",\r\n                data:res.data\r\n            })\r\n        }) \r\n    }\r\n}\r\n\r\n\r\n//获取热门推荐数据\r\nfunction useNewDics(){\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    return function(newdics){\r\n        http.get(newdics).then((res)=>{\r\n            dispatch({\r\n                type:\"newdics_data\",\r\n                data:res.data\r\n            })\r\n        }) \r\n    }\r\n}\r\n\r\n//获取榜单数据\r\nfunction useOrgdata(){\r\n    let dispatch = useDispatch();   //用来返回一个函数，在组件的生命周期useEffect执行\r\n    return function(Org){\r\n      \r\n        http.get(Org).then((res)=>{\r\n            dispatch({\r\n                type:\"topListOrg_data\",\r\n                data:res.data\r\n            })\r\n        });\r\n    }\r\n}\r\nfunction useUpdata(){\r\n    let dispatch = useDispatch();\r\n    return function(up){\r\n        http.get(up).then((res)=>{\r\n            dispatch({\r\n                type:\"topListUp_data\",\r\n                data:res.data\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction useNewdata(){\r\n    \r\n    let dispatch = useDispatch();\r\n    return function(New){\r\n        http.get(New).then((res)=>{\r\n            dispatch({\r\n                type:\"topListNew_data\",\r\n                data:res.data\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n// 获取歌单分类\r\nfunction usePlaylists(){\r\n    let dispatch = useDispatch();\r\n    return function(playlists){\r\n        http.get(playlists).then((res)=>{\r\n            dispatch({\r\n                type:\"playlists_data\",\r\n                data:res.data,\r\n                loading:false\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n//获取歌单详情\r\nfunction usePlaydetail(){\r\n    let dispatch = useDispatch();\r\n    return function(playdetail){\r\n        http.get(playdetail).then((res)=>{\r\n            dispatch({\r\n                type:\"playdetail_data\",\r\n                data:res.data,\r\n                loading:false\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n//获取音乐地址\r\nfunction useMusicurl(path){\r\n    let dispatch = useDispatch();\r\n    return function(mucid){\r\n        http.get(mucid).then((res)=>{\r\n            dispatch({\r\n                type:\"musicurl_data\",\r\n                data:res.data\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\nfunction getUrl(path){\r\n    return http.get(path)\r\n}\r\n\r\nfunction useInterTime(){\r\n    let dispatch = useDispatch();\r\n    return function(time){\r\n        dispatch({\r\n            type:\"time_data\",\r\n            data:time\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport {useLoading,useInterTime,useMhot,useBanner,useRecommend,useNewDics,useOrgdata,useUpdata,useNewdata,usePlaylists,usePlaydetail,useMusicurl,getUrl,useMRecommend,useMnewmusic}"]},"metadata":{},"sourceType":"module"}