{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, options) {\n  var ref = useRef();\n  var savedHandler = useRef();\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    var passedInElement = options && (typeof options.dom === 'function' ? options.dom() : options.dom);\n    var element = passedInElement ? passedInElement : ref.current || window;\n    var isSupported = element.addEventListener;\n    if (!isSupported) return;\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current && savedHandler.current(event);\n    };\n\n    element.addEventListener(eventName, eventListener, {\n      capture: options === null || options === void 0 ? void 0 : options.capture,\n      once: options === null || options === void 0 ? void 0 : options.once,\n      passive: options === null || options === void 0 ? void 0 : options.passive\n    });\n    return function () {\n      element.removeEventListener(eventName, eventListener, {\n        capture: options === null || options === void 0 ? void 0 : options.capture\n      });\n    };\n  }, [eventName, options, ref.current]);\n  return ref;\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["E:/github-project/cloudMusic-mobile/node_modules/@umijs/hooks/es/useEventListener/index.js"],"names":["useEffect","useRef","useEventListener","eventName","handler","options","ref","savedHandler","current","passedInElement","dom","element","window","isSupported","addEventListener","eventListener","event","capture","once","passive","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AACrD,MAAIC,GAAG,GAAGL,MAAM,EAAhB;AACA,MAAIM,YAAY,GAAGN,MAAM,EAAzB;AACAD,EAAAA,SAAS,CAAC,YAAY;AACpBO,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAGAJ,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIS,eAAe,GAAGJ,OAAO,KAAK,OAAOA,OAAO,CAACK,GAAf,KAAuB,UAAvB,GAAoCL,OAAO,CAACK,GAAR,EAApC,GAAoDL,OAAO,CAACK,GAAjE,CAA7B;AACA,QAAIC,OAAO,GAAGF,eAAe,GAAGA,eAAH,GAAqBH,GAAG,CAACE,OAAJ,IAAeI,MAAjE;AACA,QAAIC,WAAW,GAAGF,OAAO,CAACG,gBAA1B;AACA,QAAI,CAACD,WAAL,EAAkB;;AAElB,QAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,aAAOT,YAAY,CAACC,OAAb,IAAwBD,YAAY,CAACC,OAAb,CAAqBQ,KAArB,CAA/B;AACD,KAFD;;AAIAL,IAAAA,OAAO,CAACG,gBAAR,CAAyBX,SAAzB,EAAoCY,aAApC,EAAmD;AACjDE,MAAAA,OAAO,EAAEZ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACY,OADlB;AAEjDC,MAAAA,IAAI,EAAEb,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACa,IAFf;AAGjDC,MAAAA,OAAO,EAAEd,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACc;AAHlB,KAAnD;AAKA,WAAO,YAAY;AACjBR,MAAAA,OAAO,CAACS,mBAAR,CAA4BjB,SAA5B,EAAuCY,aAAvC,EAAsD;AACpDE,QAAAA,OAAO,EAAEZ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACY;AADf,OAAtD;AAGD,KAJD;AAKD,GApBQ,EAoBN,CAACd,SAAD,EAAYE,OAAZ,EAAqBC,GAAG,CAACE,OAAzB,CApBM,CAAT;AAqBA,SAAOF,GAAP;AACD;;AAED,eAAeJ,gBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, options) {\n  var ref = useRef();\n  var savedHandler = useRef();\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    var passedInElement = options && (typeof options.dom === 'function' ? options.dom() : options.dom);\n    var element = passedInElement ? passedInElement : ref.current || window;\n    var isSupported = element.addEventListener;\n    if (!isSupported) return;\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current && savedHandler.current(event);\n    };\n\n    element.addEventListener(eventName, eventListener, {\n      capture: options === null || options === void 0 ? void 0 : options.capture,\n      once: options === null || options === void 0 ? void 0 : options.once,\n      passive: options === null || options === void 0 ? void 0 : options.passive\n    });\n    return function () {\n      element.removeEventListener(eventName, eventListener, {\n        capture: options === null || options === void 0 ? void 0 : options.capture\n      });\n    };\n  }, [eventName, options, ref.current]);\n  return ref;\n}\n\nexport default useEventListener;"]},"metadata":{},"sourceType":"module"}