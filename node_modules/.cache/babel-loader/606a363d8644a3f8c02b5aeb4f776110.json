{"ast":null,"code":"/* eslint no-empty: 0 */\nimport { useLayoutEffect, useRef } from 'react';\nimport screenfull from 'screenfull';\nimport useBoolean from '../useBoolean';\nexport default (function (options) {\n  var _ref = options || {},\n      dom = _ref.dom,\n      onExitFull = _ref.onExitFull,\n      onFull = _ref.onFull;\n\n  var onExitFullRef = useRef(onExitFull);\n  onExitFullRef.current = onExitFull;\n  var onFullRef = useRef(onFull);\n  onFullRef.current = onFull;\n  var element = useRef();\n\n  var _useBoolean = useBoolean(false),\n      state = _useBoolean.state,\n      toggle = _useBoolean.toggle,\n      setTrue = _useBoolean.setTrue,\n      setFalse = _useBoolean.setFalse;\n\n  useLayoutEffect(function () {\n    /* 非全屏时，不需要监听任何全屏事件 */\n    if (!state) {\n      return;\n    }\n\n    var passedInElement = typeof dom === 'function' ? dom() : dom;\n    var targetElement = passedInElement || element.current;\n\n    if (!targetElement) {\n      return;\n    }\n    /* 监听退出 */\n\n\n    var onChange = function onChange() {\n      if (screenfull.isEnabled) {\n        var isFullscreen = screenfull.isFullscreen;\n        toggle(isFullscreen);\n      }\n    };\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(targetElement);\n        setTrue();\n\n        if (onFullRef.current) {\n          onFullRef.current();\n        }\n      } catch (error) {\n        setFalse();\n\n        if (onExitFullRef.current) {\n          onExitFullRef.current();\n        }\n      }\n\n      screenfull.on('change', onChange);\n    }\n    /* state 从 true 变为 false，则关闭全屏 */\n\n\n    return function () {\n      if (screenfull.isEnabled) {\n        try {\n          screenfull.off('change', onChange);\n          screenfull.exit();\n        } catch (error) {}\n      }\n\n      if (onExitFullRef.current) {\n        onExitFullRef.current();\n      }\n    };\n  }, [state, typeof dom === 'function' ? undefined : dom]);\n\n  var toggleFull = function toggleFull() {\n    return toggle();\n  };\n\n  var result = {\n    isFullscreen: !!state,\n    setFull: setTrue,\n    exitFull: setFalse,\n    toggleFull: toggleFull\n  };\n\n  if (!dom) {\n    result.ref = element;\n  }\n\n  return result;\n});","map":{"version":3,"sources":["E:/github-project/cloudMusic-mobile/node_modules/@umijs/hooks/es/useFullscreen/index.js"],"names":["useLayoutEffect","useRef","screenfull","useBoolean","options","_ref","dom","onExitFull","onFull","onExitFullRef","current","onFullRef","element","_useBoolean","state","toggle","setTrue","setFalse","passedInElement","targetElement","onChange","isEnabled","isFullscreen","request","error","on","off","exit","undefined","toggleFull","result","setFull","exitFull","ref"],"mappings":"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","sourcesContent":["/* eslint no-empty: 0 */\nimport { useLayoutEffect, useRef } from 'react';\nimport screenfull from 'screenfull';\nimport useBoolean from '../useBoolean';\nexport default (function (options) {\n  var _ref = options || {},\n      dom = _ref.dom,\n      onExitFull = _ref.onExitFull,\n      onFull = _ref.onFull;\n\n  var onExitFullRef = useRef(onExitFull);\n  onExitFullRef.current = onExitFull;\n  var onFullRef = useRef(onFull);\n  onFullRef.current = onFull;\n  var element = useRef();\n\n  var _useBoolean = useBoolean(false),\n      state = _useBoolean.state,\n      toggle = _useBoolean.toggle,\n      setTrue = _useBoolean.setTrue,\n      setFalse = _useBoolean.setFalse;\n\n  useLayoutEffect(function () {\n    /* 非全屏时，不需要监听任何全屏事件 */\n    if (!state) {\n      return;\n    }\n\n    var passedInElement = typeof dom === 'function' ? dom() : dom;\n    var targetElement = passedInElement || element.current;\n\n    if (!targetElement) {\n      return;\n    }\n    /* 监听退出 */\n\n\n    var onChange = function onChange() {\n      if (screenfull.isEnabled) {\n        var isFullscreen = screenfull.isFullscreen;\n        toggle(isFullscreen);\n      }\n    };\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(targetElement);\n        setTrue();\n\n        if (onFullRef.current) {\n          onFullRef.current();\n        }\n      } catch (error) {\n        setFalse();\n\n        if (onExitFullRef.current) {\n          onExitFullRef.current();\n        }\n      }\n\n      screenfull.on('change', onChange);\n    }\n    /* state 从 true 变为 false，则关闭全屏 */\n\n\n    return function () {\n      if (screenfull.isEnabled) {\n        try {\n          screenfull.off('change', onChange);\n          screenfull.exit();\n        } catch (error) {}\n      }\n\n      if (onExitFullRef.current) {\n        onExitFullRef.current();\n      }\n    };\n  }, [state, typeof dom === 'function' ? undefined : dom]);\n\n  var toggleFull = function toggleFull() {\n    return toggle();\n  };\n\n  var result = {\n    isFullscreen: !!state,\n    setFull: setTrue,\n    exitFull: setFalse,\n    toggleFull: toggleFull\n  };\n\n  if (!dom) {\n    result.ref = element;\n  }\n\n  return result;\n});"]},"metadata":{},"sourceType":"module"}